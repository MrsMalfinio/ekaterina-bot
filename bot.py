# -*- coding: utf-8 -*-
# –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: python-telegram-bot==21.4

import os
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

# ========= –ù–ê–°–¢–†–û–ô–ö–ò =========
BOT_TOKEN = os.getenv("BOT_TOKEN")   # —Ç–µ–ø–µ—Ä—å –±–µ—Ä—ë—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
ADMIN_ID = int(os.getenv("ADMIN_ID"))  # —Ç–æ–∂–µ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è

STATE_ASK_Q = "ask_question"
STATE_ASK_DOB = "ask_dob"

DOB_RE = re.compile(r"^(0?[1-9]|[12][0-9]|3[01])\.(0?[1-9]|1[0-2])\.(\d{4})$")
START_TRIGGERS = r"(\+|—Å—Ç–∞—Ä—Ç|–Ω–∞—á–∞—Ç—å|–ø—Ä–∏–≤–µ—Ç|–∑–∞–¥–∞—Ç—å\s+–≤–æ–ø—Ä–æ—Å|–Ω–∞–ø–∏—Å–∞—Ç—å\s+–≤–æ–ø—Ä–æ—Å|—Å–ø—Ä–æ—Å–∏—Ç—å)"

ASK_AGAIN_KB = InlineKeyboardMarkup(
    [[InlineKeyboardButton("‚ûï –ó–∞–¥–∞—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å", callback_data="ask_again")]]
)

# ========= –¢–ï–ö–°–¢–´ =========
WELCOME_TEXT = (
    "<b>‚ú® –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è</b> \n\n"
    "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å. –û —Å–µ–±–µ, –æ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è—Ö, –æ —Å—Ç—Ä–∞—Ö–∞—Ö –∏–ª–∏ –æ —Ç–æ–º, —á—Ç–æ –¥–∞–≤–Ω–æ –Ω–µ –¥–∞—ë—Ç –ø–æ–∫–æ—è.\n"
    "<b>–í–∞–∂–Ω–æ:</b> ‚ùóÔ∏è–≤–æ–ø—Ä–æ—Å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–Ω–æ–Ω–∏–º–Ω—ã–π. –î–∞–∂–µ —è –Ω–µ —É–≤–∏–∂—É, –æ—Ç –∫–æ–≥–æ –æ–Ω –ø—Ä–∏—à—ë–ª.\n\n"
    "–ü–∏—à–∏ —Ç–æ, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–æ–ª–Ω—É–µ—Ç. –ò–Ω–æ–≥–¥–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–∑–≤—É—á–∏—Ç—å, –∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ª–µ–≥—á–µ.\n"
    "–ê —è —Ä–∞–∑–±–µ—Ä—É —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ –¥–∞–º –æ—Ç–≤–µ—Ç –≤ –∫–∞–Ω–∞–ª–µ, —á—Ç–æ–±—ã –∫–∞–∂–¥–∞—è —Å–º–æ–≥–ª–∞ –Ω–∞–π—Ç–∏ –æ—Ç–∫–ª–∏–∫ –¥–ª—è —Å–µ–±—è.\n\n"
    "<b>ü§ç –¢—ã –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—ã—Ç—å –Ω–∞—Å—Ç–æ—è—â–µ–π.</b>\n"
)

ASK_AGAIN_TEXT = "–ï—Å–ª–∏ —Ç–µ–±—è —Å–Ω–æ–≤–∞ —á—Ç–æ-—Ç–æ –≤–æ–ª–Ω—É–µ—Ç, –∑–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, —è —Ä–∞–∑–±–µ—Ä—É –µ–≥–æ –∏ –¥–∞–º —Ç–µ–±–µ –æ—Ç–≤–µ—Ç—ã"

ASK_DOB_PROMPT = (
    "–ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç –±—ã–ª –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º, –º–Ω–µ –≤–∞–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å —Ç–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è.\n"
    "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤–∑–≥–ª—è–Ω—É—Ç—å —á–µ—Ä–µ–∑ –ø—Ä–∏–∑–º—É –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏ –∏ –ø–æ–Ω—è—Ç—å —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å –≥–ª—É–±–∂–µ.\n\n"
    "üìå <b>–ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –¥–¥.–º–º.–≥–≥–≥–≥</b>\n\n"
    "<b>–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –≤—Å—ë —Ç–∞–∫ –∂–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–Ω–æ–Ω–∏–º–Ω–æ.</b> –ù–∏–∫—Ç–æ –Ω–µ —É–∑–Ω–∞–µ—Ç, –æ—Ç –∫–æ–≥–æ –ø—Ä–∏—à—ë–ª –≤–æ–ø—Ä–æ—Å, –¥–∞–∂–µ —è ü§ç"
)

THANK_YOU_TEXT = (
    "<b>–°–ø–∞—Å–∏–±–æ —Ç–µ–±–µ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ –∏ –∑–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å üôè</b>\n"
    "–°–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ —è —Å–¥–µ–ª–∞—é —Ä–∞–∑–±–æ—Ä –∏ –ø–æ–¥–µ–ª—é—Å—å –∏–º –≤ –∫–∞–Ω–∞–ª–µ.\n\n"
    "<b>–ß—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ä–∞–∑–±–æ—Ä —Ç–≤–æ–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞, –≤–∫–ª—é—á–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –±—É–¥—å —Ä—è–¥–æ–º ü§ç</b>"
)

# ========= –õ–û–ì–ò–ö–ê =========
async def _start_flow(chat, context: ContextTypes.DEFAULT_TYPE, welcome: bool):
    context.user_data.clear()
    if welcome:
        await chat.reply_text(WELCOME_TEXT, parse_mode=ParseMode.HTML)
    context.user_data["state"] = STATE_ASK_Q

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await _start_flow(update.message, context, welcome=True)

async def trigger_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await _start_flow(update.message, context, welcome=True)

async def ask_again_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    context.user_data.clear()
    await q.message.reply_text(ASK_AGAIN_TEXT)
    context.user_data["state"] = STATE_ASK_Q

async def text_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()
    state = context.user_data.get("state")

    if state is None:
        if re.search(START_TRIGGERS, text, flags=re.IGNORECASE):
            return await _start_flow(update.message, context, welcome=True)
        return await update.message.reply_text("–ù–∞–ø–∏—à–∏ ¬´—Å—Ç–∞—Ä—Ç¬ª –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–ó–∞–¥–∞—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")

    if state == STATE_ASK_Q:
        context.user_data["question"] = text
        context.user_data["state"] = STATE_ASK_DOB
        return await update.message.reply_text(ASK_DOB_PROMPT, parse_mode=ParseMode.HTML)

    if state == STATE_ASK_DOB:
        if not DOB_RE.match(text):
            return await update.message.reply_text("–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: –¥–¥.–º–º.–≥–≥–≥–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 17.09.1993)")

        question = context.user_data.get("question", "").strip()

        # —Å–æ–æ–±—â–µ–Ω–∏–µ –ï–∫–∞—Ç–µ—Ä–∏–Ω–µ
        admin_msg = (
            "üìù –ù–æ–≤—ã–π –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å\n\n"
            f"üìå –í–æ–ø—Ä–æ—Å: {question}\n"
            f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {text}"
        )
        try:
            await context.bot.send_message(chat_id=ADMIN_ID, text=admin_msg)
        except Exception as e:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:", e)

        # –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å + –ö–ù–û–ü–ö–ê
        await update.message.reply_text(
            THANK_YOU_TEXT,
            parse_mode=ParseMode.HTML,
            reply_markup=ASK_AGAIN_KB
        )
        context.user_data.clear()
        return

    context.user_data.clear()
    await update.message.reply_text("–î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Å–Ω–∞—á–∞–ª–∞. –ù–∞–ø–∏—à–∏ ¬´—Å—Ç–∞—Ä—Ç¬ª.")
    return

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("(?i)"+START_TRIGGERS), trigger_start))
    app.add_handler(CallbackQueryHandler(ask_again_cb, pattern=r"^ask_again$"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_router))

    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
